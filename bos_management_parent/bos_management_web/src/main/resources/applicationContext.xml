<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/data/jpa
		http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://cxf.apache.org/jaxws
		http://cxf.apache.org/schemas/jaxws.xsd">

    <!-- 开启包扫描 -->
    <context:component-scan base-package="com.yapengren"></context:component-scan>

    <!--加载配置文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!-- 配置连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- spring整合JPA -->
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!-- 注入数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 指定实体包 -->
        <property name="packagesToScan" value="com.yapengren.bos.domain"/>
        <!-- 指定持久层提供者为Hibernate -->
        <property name="persistenceProvider">
            <bean class="org.hibernate.ejb.HibernatePersistence"/>
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
        <!-- 指定实现框架方言 -->
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
        </property>
        <!-- 指定hibernate配置属性 -->
        <property name="jpaProperties">
            <props>
                <!-- 指定库名(MYSQL)|用户名(itcast) -->
                <prop key="hibernate.default_schema">bos_yapengren</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">none</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
            </props>
        </property>
    </bean>

    <!-- 事务管理器(JPA平台) -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- 注解驱动事务开关 => 需要使用cglib 代理 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <!-- 整合 spring_data_jpa => 指定dao接口放置在哪个包下 -->
    <jpa:repositories base-package="com.yapengren.bos.dao"/>


    <!-- === webservice start ==================================================================== -->
    <!-- 注册crm webservice客户端 -->
    <jaxws:client id="customerService" address="http://localhost:9090/crm/service/customer"
                  serviceClass="com.yapengren.crm.service.impl.CustomerServiceImpl"></jaxws:client>

    <!-- 配置ws 服务 -->
    <jaxws:server address="/order">
        <jaxws:serviceBean>
            <ref bean="orderService"/>
        </jaxws:serviceBean>
    </jaxws:server>
    <!--=== webservice end ========================================================================-->


    <!--=== EHCache缓存 & shiro start ===============================================================-->
    <!--注册缓存管理器对象-->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"></property>
    </bean>

    <!--shiro配置权限管理器：securityManager-->
    <bean name="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="myRealm"></property>

        <!--注入缓存管理器-->
        <property name="cacheManager" ref="cacheManager"></property>
    </bean>

    <!--shiro配置权限过滤器：shiroFilter-->
    <bean name="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!--注入权限管理器-->
        <property name="securityManager" ref="securityManager"></property>
        <!--配置登录页面路径（1类资源）-->
        <property name="loginUrl" value="/login.html"></property>
        <!--没有权限的错误提示页面-->
        <property name="unauthorizedUrl" value="/unauthorizedUrl.jsp"></property>
        <!--
            指定 1 | 2 | 3 类资源
            anon过滤器 => 过滤1类资源
            perms[courier] => 过滤3类资源
            /** = authc 除了刚才配置的1类 | 3类资源外的其他路径属于2类资源
        -->
        <property name="filterChainDefinitions">
            <value>
                /demo/shiro.jsp = anon
                /UserAction_login.action = anon
                /validatecode.jsp* = anon
                /css/** = anon
                /js/** = anon
                /images/** = anon
                <!--提供给bos_fore生成webService客户端-->
                /service/order* = anon
                <!--/pages/base/courier.html = perms[area]-->
                /** = authc
            </value>
        </property>
    </bean>

    <!--shiro配置权限通知：shiro Advisor-->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"></property>
    </bean>

    <!--
        配置自动织入工具类（springAOP）
            将该类配置到容器中，该类就会自动从容器中查找Advisor 对象完成自动织入（代理）
    -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
        <!--指定默认使用cglib 代理-->
        <property name="proxyTargetClass" value="true"></property>
    </bean>
    <!--=== EHCache缓存 & shiro end =============================================================================-->


    <!--=== quartz定时器 start ===================================================================================-->
    <!--注册JobDetail 对象，负责通过反射调用自定义的job中的方法-->
    <bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!--注入目标对象-->
        <property name="targetObject" ref="myJob"/>
        <!--注入目标方法-->
        <property name="targetMethod" value="abc"/>
    </bean>

    <!--注册触发器，指定任务的触发时间-->
    <bean id="myTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <!--指定任务-->
        <property name="jobDetail" ref="jobDetail"/>
        <!--绑定cron表达式-->
        <property name="cronExpression">
            <value>0 0 0/1 * * ? *</value>
        </property>
    </bean>

    <!--配置统一的调度工厂-->
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <!--注入触发器，可以有多个-->
        <property name="triggers">
            <list>
                <ref bean="myTrigger"/>
            </list>
        </property>
    </bean>
    <!--=== quartz定时器 end ===================================================================================-->
</beans>